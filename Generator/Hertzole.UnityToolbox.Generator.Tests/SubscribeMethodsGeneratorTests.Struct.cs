using Xunit;

namespace Hertzole.UnityToolbox.Generator.Tests;

public sealed partial class SubscribeMethodsGeneratorTests
{
	private const string SCRIPTABLE_BOOL_STRUCT = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;
 
public partial struct TestStruct
{
 	[GenerateSubscribeMethods]
 	public ScriptableBool boolValue;
	[GenerateSubscribeMethods]
	public ScriptableBool BoolValue { get; set; }
    
    private partial void OnBoolValueChanged(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_VALUE_T_STRUCT = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;
 
public partial struct TestStruct
{
 	[GenerateSubscribeMethods]
 	public ScriptableValue<bool> value;
	[GenerateSubscribeMethods]
	public ScriptableValue<bool> Value { get; set; }
    
    private partial void OnValueChanged(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
    
    private partial void OnValue_1Changed(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_EVENT_STRUCT = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;

public partial struct TestStruct
{
    [GenerateSubscribeMethods]
    public ScriptableEvent eventValue;
    [GenerateSubscribeMethods]
    public ScriptableEvent EventValue { get; set; }
    
    private partial void OnEventInvoked()
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_BOOL_EVENT_STRUCT = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;

public partial struct TestStruct
{
	[GenerateSubscribeMethods]
	public ScriptableBoolEvent boolEvent;
	[GenerateSubscribeMethods]
	public ScriptableBoolEvent BoolEvent { get; set; }
	
	private partial void OnBoolEventInvoked(bool value)
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_EVENT_T_STRUCT = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;

public partial struct TestStruct
{
    	[GenerateSubscribeMethods]
    	public ScriptableEvent<bool> eventValue;
    	[GenerateSubscribeMethods]
    	public ScriptableEvent<bool> EventValue { get; set; }
    
    	private partial void OnEventInvoked(bool value)
        {
			throw new NotImplementedException();
		}
}";

	private const string EXPECTED_SCRIPTABLE_BOOL_STRUCT = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial struct TestStruct
{
    private global::Hertzole.ScriptableValues.ScriptableValue<bool>.OldNewValue<bool> boolValue_OnChanged;
    private global::Hertzole.ScriptableValues.ScriptableValue<bool>.OldNewValue<bool> BoolValue_1_OnChanged;
	private bool hasSubscribedToBoolValue = false;
	private bool hasSubscribedToBoolValue_1 = false;

    private void CreateScriptableValueCallbacks()
	{
		boolValue_OnChanged = OnBoolValueChanged;
		BoolValue_1_OnChanged = OnBoolValue_1Changed;
	}

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToBoolValue();
		SubscribeToBoolValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromBoolValue();
		UnsubscribeFromBoolValue_1();
	}

	private void SubscribeToBoolValue()
	{
		if (boolValue != null && !hasSubscribedToBoolValue)
		{
#if DEBUG || UNITY_EDITOR
			if (boolValue_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for boolValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			boolValue.OnValueChanged += boolValue_OnChanged;
			hasSubscribedToBoolValue = true;
		}
	}

	private void UnsubscribeFromBoolValue()
	{
		if (boolValue != null && hasSubscribedToBoolValue)
		{
#if DEBUG || UNITY_EDITOR
			if (boolValue_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for boolValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			boolValue.OnValueChanged -= boolValue_OnChanged;
			hasSubscribedToBoolValue = false;
		}
	}

	private partial void OnBoolValueChanged(bool previousValue, bool newValue);

	private void SubscribeToBoolValue_1()
	{
		if (BoolValue != null && !hasSubscribedToBoolValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (BoolValue_1_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for BoolValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			BoolValue.OnValueChanged += BoolValue_1_OnChanged;
			hasSubscribedToBoolValue_1 = true;
		}
	}

	private void UnsubscribeFromBoolValue_1()
	{
		if (BoolValue != null && hasSubscribedToBoolValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (BoolValue_1_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for BoolValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			BoolValue.OnValueChanged -= BoolValue_1_OnChanged;
			hasSubscribedToBoolValue_1 = false;
		}
	}

	private partial void OnBoolValue_1Changed(bool previousValue, bool newValue);
}
";

	private const string EXPECTED_SCRIPTABLE_VALUE_T_STRUCT = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial struct TestStruct
{
    private global::Hertzole.ScriptableValues.ScriptableValue<bool>.OldNewValue<bool> value_OnChanged;
    private global::Hertzole.ScriptableValues.ScriptableValue<bool>.OldNewValue<bool> Value_1_OnChanged;
	private bool hasSubscribedToValue = false;
	private bool hasSubscribedToValue_1 = false;

    private void CreateScriptableValueCallbacks()
	{
		value_OnChanged = OnValueChanged;
		Value_1_OnChanged = OnValue_1Changed;
	}

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToValue();
		SubscribeToValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromValue();
		UnsubscribeFromValue_1();
	}

	private void SubscribeToValue()
	{
		if (value != null && !hasSubscribedToValue)
		{
#if DEBUG || UNITY_EDITOR
			if (value_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for value. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			value.OnValueChanged += value_OnChanged;
			hasSubscribedToValue = true;
		}
	}

	private void UnsubscribeFromValue()
	{
		if (value != null && hasSubscribedToValue)
		{
#if DEBUG || UNITY_EDITOR
			if (value_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for value. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			value.OnValueChanged -= value_OnChanged;
			hasSubscribedToValue = false;
		}
	}

	private partial void OnValueChanged(bool previousValue, bool newValue);

	private void SubscribeToValue_1()
	{
		if (Value != null && !hasSubscribedToValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (Value_1_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for Value. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			Value.OnValueChanged += Value_1_OnChanged;
			hasSubscribedToValue_1 = true;
		}
	}

	private void UnsubscribeFromValue_1()
	{
		if (Value != null && hasSubscribedToValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (Value_1_OnChanged == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for Value. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			Value.OnValueChanged -= Value_1_OnChanged;
			hasSubscribedToValue_1 = false;
		}
	}

	private partial void OnValue_1Changed(bool previousValue, bool newValue);
}
";

	private const string EXPECTED_SCRIPTABLE_EVENT_STRUCT = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial struct TestStruct
{
    private global::System.EventHandler eventValue_OnInvoked;
    private global::System.EventHandler EventValue_1_OnInvoked;
	private bool hasSubscribedToEventValue = false;
	private bool hasSubscribedToEventValue_1 = false;

    private void CreateScriptableValueCallbacks()
	{
		eventValue_OnInvoked = OnEventValueInvoked;
		EventValue_1_OnInvoked = OnEventValue_1Invoked;
	}

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToEventValue();
		SubscribeToEventValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromEventValue();
		UnsubscribeFromEventValue_1();
	}

	private void SubscribeToEventValue()
	{
		if (eventValue != null && !hasSubscribedToEventValue)
		{
#if DEBUG || UNITY_EDITOR
			if (eventValue_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for eventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			eventValue.OnInvoked += eventValue_OnInvoked;
			hasSubscribedToEventValue = true;
		}
	}

	private void UnsubscribeFromEventValue()
	{
		if (eventValue != null && hasSubscribedToEventValue)
		{
#if DEBUG || UNITY_EDITOR
			if (eventValue_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for eventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			eventValue.OnInvoked -= eventValue_OnInvoked;
			hasSubscribedToEventValue = false;
		}
	}

	private partial void OnEventValueInvoked(object sender, global::System.EventArgs e);

	private void SubscribeToEventValue_1()
	{
		if (EventValue != null && !hasSubscribedToEventValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (EventValue_1_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for EventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			EventValue.OnInvoked += EventValue_1_OnInvoked;
			hasSubscribedToEventValue_1 = true;
		}
	}

	private void UnsubscribeFromEventValue_1()
	{
		if (EventValue != null && hasSubscribedToEventValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (EventValue_1_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for EventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			EventValue.OnInvoked -= EventValue_1_OnInvoked;
			hasSubscribedToEventValue_1 = false;
		}
	}

	private partial void OnEventValue_1Invoked(object sender, global::System.EventArgs e);
}
";

	private const string EXPECTED_SCRIPTABLE_BOOL_EVENT_STRUCT = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial struct TestStruct
{
    private global::System.EventHandler<bool> boolEvent_OnInvoked;
    private global::System.EventHandler<bool> BoolEvent_1_OnInvoked;
	private bool hasSubscribedToBoolEvent = false;
	private bool hasSubscribedToBoolEvent_1 = false;

    private void CreateScriptableValueCallbacks()
	{
		boolEvent_OnInvoked = OnBoolEventInvoked;
		BoolEvent_1_OnInvoked = OnBoolEvent_1Invoked;
	}

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToBoolEvent();
		SubscribeToBoolEvent_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromBoolEvent();
		UnsubscribeFromBoolEvent_1();
	}

	private void SubscribeToBoolEvent()
	{
		if (boolEvent != null && !hasSubscribedToBoolEvent)
		{
#if DEBUG || UNITY_EDITOR
			if (boolEvent_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for boolEvent. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			boolEvent.OnInvoked += boolEvent_OnInvoked;
			hasSubscribedToBoolEvent = true;
		}
	}

	private void UnsubscribeFromBoolEvent()
	{
		if (boolEvent != null && hasSubscribedToBoolEvent)
		{
#if DEBUG || UNITY_EDITOR
			if (boolEvent_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for boolEvent. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			boolEvent.OnInvoked -= boolEvent_OnInvoked;
			hasSubscribedToBoolEvent = false;
		}
	}

	private partial void OnBoolEventInvoked(object sender, bool args);

	private void SubscribeToBoolEvent_1()
	{
		if (BoolEvent != null && !hasSubscribedToBoolEvent_1)
		{
#if DEBUG || UNITY_EDITOR
			if (BoolEvent_1_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for BoolEvent. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			BoolEvent.OnInvoked += BoolEvent_1_OnInvoked;
			hasSubscribedToBoolEvent_1 = true;
		}
	}

	private void UnsubscribeFromBoolEvent_1()
	{
		if (BoolEvent != null && hasSubscribedToBoolEvent_1)
		{
#if DEBUG || UNITY_EDITOR
			if (BoolEvent_1_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for BoolEvent. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			BoolEvent.OnInvoked -= BoolEvent_1_OnInvoked;
			hasSubscribedToBoolEvent_1 = false;
		}
	}

	private partial void OnBoolEvent_1Invoked(object sender, bool args);
}
";

	private const string EXPECTED_SCRIPTABLE_EVENT_T_STRUCT = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial struct TestStruct
{
    private global::System.EventHandler<bool> eventValue_OnInvoked;
    private global::System.EventHandler<bool> EventValue_1_OnInvoked;
	private bool hasSubscribedToEventValue = false;
	private bool hasSubscribedToEventValue_1 = false;

    private void CreateScriptableValueCallbacks()
	{
		eventValue_OnInvoked = OnEventValueInvoked;
		EventValue_1_OnInvoked = OnEventValue_1Invoked;
	}

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToEventValue();
		SubscribeToEventValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromEventValue();
		UnsubscribeFromEventValue_1();
	}

	private void SubscribeToEventValue()
	{
		if (eventValue != null && !hasSubscribedToEventValue)
		{
#if DEBUG || UNITY_EDITOR
			if (eventValue_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for eventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			eventValue.OnInvoked += eventValue_OnInvoked;
			hasSubscribedToEventValue = true;
		}
	}

	private void UnsubscribeFromEventValue()
	{
		if (eventValue != null && hasSubscribedToEventValue)
		{
#if DEBUG || UNITY_EDITOR
			if (eventValue_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for eventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			eventValue.OnInvoked -= eventValue_OnInvoked;
			hasSubscribedToEventValue = false;
		}
	}

	private partial void OnEventValueInvoked(object sender, bool args);

	private void SubscribeToEventValue_1()
	{
		if (EventValue != null && !hasSubscribedToEventValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (EventValue_1_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for EventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			EventValue.OnInvoked += EventValue_1_OnInvoked;
			hasSubscribedToEventValue_1 = true;
		}
	}

	private void UnsubscribeFromEventValue_1()
	{
		if (EventValue != null && hasSubscribedToEventValue_1)
		{
#if DEBUG || UNITY_EDITOR
			if (EventValue_1_OnInvoked == null)
			{
				throw new global::System.NullReferenceException(""Missing callback for EventValue. Did you call 'CreateScriptableValueCallbacks()' before subscribing to values?"");
			}
#endif
			EventValue.OnInvoked -= EventValue_1_OnInvoked;
			hasSubscribedToEventValue_1 = false;
		}
	}

	private partial void OnEventValue_1Invoked(object sender, bool args);
}
";

	[Fact]
	public void Struct_ScriptableBool()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestStruct.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_BOOL_STRUCT,
			EXPECTED_SCRIPTABLE_BOOL_STRUCT);
	}

	[Fact]
	public void Struct_ScriptableValueT()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestStruct.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_VALUE_T_STRUCT,
			EXPECTED_SCRIPTABLE_VALUE_T_STRUCT);
	}

	[Fact]
	public void Struct_ScriptableEvent()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestStruct.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_EVENT_STRUCT,
			EXPECTED_SCRIPTABLE_EVENT_STRUCT);
	}

	[Fact]
	public void Struct_ScriptableBoolEvent()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestStruct.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_BOOL_EVENT_STRUCT,
			EXPECTED_SCRIPTABLE_BOOL_EVENT_STRUCT);
	}

	[Fact]
	public void Struct_ScriptableEventT()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestStruct.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_EVENT_T_STRUCT,
			EXPECTED_SCRIPTABLE_EVENT_T_STRUCT);
	}
}