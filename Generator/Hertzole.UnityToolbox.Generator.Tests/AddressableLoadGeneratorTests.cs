using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Hertzole.UnityToolbox.Generator.Tests;

public sealed class AddressableLoadGeneratorTests
{
	private const string ADDRESSABLE_LOAD_CLASS = @"using Hertzole.UnityToolbox;
using UnityEngine;
using UnityEngine.AddressableAssets;

public partial class TestClass
{
	[GenerateLoad]
	public AssetReferenceT<GameObject> assetReference;
}";

	private const string EXPECTED_ADDRESSABLE_LOAD_CLASS = @"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial class TestClass
{
	private global::UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<global::GameObject> assetReferenceHandle;
	[global::JetBrains.Annotations.CanBeNull]
	private global::GameObject asset = null;
	private void LoadAssets()
	{
		assetReferenceHandle = global::UnityEngine.AddressableAssets.Addressables.LoadAssetAsync<global::GameObject>(assetReference);
		assetReferenceHandle.Completed += (op) =>
		{
			if (op.Status == global::UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus.Succeeded)
			{
				asset = op.Result;
				OnAssetLoaded(op.Result);
			}
			else
			{
				global::UnityEngine.Debug.LogError($""Failed to load reference assetReference with error: {op.OperationException}"");
			}
		};
	}
	private void ReleaseAssets()
	{
		if (assetReferenceHandle.IsValid())
		{
			global::UnityEngine.AddressableAssets.Addressables.Release(assetReferenceHandle);
		}
	}
	partial void OnAssetLoaded(global::GameObject value);
}
";

	[Fact]
	public void Test()
	{
		RunTest("TestClass.Addressables.g.cs", ADDRESSABLE_LOAD_CLASS, EXPECTED_ADDRESSABLE_LOAD_CLASS);
	}

	private static void RunTest(string fileName, string text, string expected)
	{
		AddressableLoadGenerator generator = new AddressableLoadGenerator();

		CSharpGeneratorDriver driver = CSharpGeneratorDriver.Create(generator);

		CSharpCompilation compilation =
			CSharpCompilation.Create(nameof(AddressableLoadGeneratorTests), new[] { CSharpSyntaxTree.ParseText(text) },
				new[]
				{
					MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
					MetadataReference.CreateFromFile("../../../../../Library/ScriptAssemblies/Hertzole.UnityToolbox.dll"),
					MetadataReference.CreateFromFile("../../../../../Library/ScriptAssemblies/Hertzole.ScriptableValues.dll"),
					MetadataReference.CreateFromFile("../../../../../Library/ScriptAssemblies/Unity.Addressables.dll"),
					MetadataReference.CreateFromFile("../../../../../Library/ScriptAssemblies/Unity.ResourceManager.dll")
				});

		GeneratorDriverRunResult runResult = driver.RunGenerators(compilation).GetRunResult();

		SyntaxTree generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith(fileName));

		Assert.Equal(expected, generatedFileSyntax.GetText().ToString());
	}
}