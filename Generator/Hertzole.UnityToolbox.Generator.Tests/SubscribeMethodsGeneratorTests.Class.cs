using Xunit;

namespace Hertzole.UnityToolbox.Generator.Tests;

public sealed partial class SubscribeMethodsGeneratorTests
{
	private const string SCRIPTABLE_BOOL_CLASS = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;
 
public partial class TestClass
{
 	[GenerateSubscribeMethods]
 	public ScriptableBool boolValue;
	[GenerateSubscribeMethods]
	public ScriptableBool BoolValue { get; set; }
    
    private partial void OnBoolValueChanged(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
    
    private partial void OnBoolValue_1Changed(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_VALUE_T_CLASS = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;
 
public partial class TestClass
{
 	[GenerateSubscribeMethods]
 	public ScriptableValue<bool> value;
	[GenerateSubscribeMethods]
	public ScriptableValue<bool> Value { get; set; }
    
    private partial void OnValueChanged(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
    
	private partial void OnValue_1Changed(bool previousValue, bool newValue)
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_EVENT_CLASS = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;

public partial class TestClass
{
    [GenerateSubscribeMethods]
    public ScriptableEvent eventValue;
    [GenerateSubscribeMethods]
    public ScriptableEvent EventValue { get; set; }
    
    private partial void OnEventValueInvoked()
	{
		throw new NotImplementedException();
	}
    
    private partial void OnEventValue_1Invoked()
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_BOOL_EVENT_CLASS = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;

public partial class TestClass
{
	[GenerateSubscribeMethods]
	public ScriptableBoolEvent boolEvent;
	[GenerateSubscribeMethods]
	public ScriptableBoolEvent BoolEvent { get; set; }
	
	private partial void OnBoolEventInvoked(bool value)
	{
		throw new NotImplementedException();
	}
    
    private partial void OnBoolEvent_1Invoked(bool value)
	{
		throw new NotImplementedException();
	}
}";

	private const string SCRIPTABLE_EVENT_T_CLASS = /*lang=cs*/@"using Hertzole.UnityToolbox;
using Hertzole.ScriptableValues;

public partial class TestClass
{
    [GenerateSubscribeMethods]
    public ScriptableEvent<bool> eventValue;
    [GenerateSubscribeMethods]
    public ScriptableEvent<bool> EventValue { get; set; }

    private partial void OnEventValueInvoked(bool value)
    {
		throw new NotImplementedException();
	}
    
	private partial void OnEventValue_1Invoked(bool value)
	{
		throw new NotImplementedException();
	}
}";

	private const string EXPECTED_SCRIPTABLE_BOOL_CLASS = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial class TestClass
{
	private bool hasSubscribedToBoolValue = false;
	private bool hasSubscribedToBoolValue_1 = false;

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToBoolValue();
		SubscribeToBoolValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromBoolValue();
		UnsubscribeFromBoolValue_1();
	}

	private void SubscribeToBoolValue()
	{
		if (boolValue != null && !hasSubscribedToBoolValue)
		{
			boolValue.OnValueChanged += OnBoolValueChanged;
			hasSubscribedToBoolValue = true;
		}
	}

	private void UnsubscribeFromBoolValue()
	{
		if (boolValue != null && hasSubscribedToBoolValue)
		{
			boolValue.OnValueChanged -= OnBoolValueChanged;
			hasSubscribedToBoolValue = false;
		}
	}

	private partial void OnBoolValueChanged(bool previousValue, bool newValue);

	private void SubscribeToBoolValue_1()
	{
		if (BoolValue != null && !hasSubscribedToBoolValue_1)
		{
			BoolValue.OnValueChanged += OnBoolValue_1Changed;
			hasSubscribedToBoolValue_1 = true;
		}
	}

	private void UnsubscribeFromBoolValue_1()
	{
		if (BoolValue != null && hasSubscribedToBoolValue_1)
		{
			BoolValue.OnValueChanged -= OnBoolValue_1Changed;
			hasSubscribedToBoolValue_1 = false;
		}
	}

	private partial void OnBoolValue_1Changed(bool previousValue, bool newValue);
}
";

	private const string EXPECTED_SCRIPTABLE_VALUE_T_CLASS = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial class TestClass
{
	private bool hasSubscribedToValue = false;
	private bool hasSubscribedToValue_1 = false;

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToValue();
		SubscribeToValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromValue();
		UnsubscribeFromValue_1();
	}

	private void SubscribeToValue()
	{
		if (value != null && !hasSubscribedToValue)
		{
			value.OnValueChanged += OnValueChanged;
			hasSubscribedToValue = true;
		}
	}

	private void UnsubscribeFromValue()
	{
		if (value != null && hasSubscribedToValue)
		{
			value.OnValueChanged -= OnValueChanged;
			hasSubscribedToValue = false;
		}
	}

	private partial void OnValueChanged(bool previousValue, bool newValue);

	private void SubscribeToValue_1()
	{
		if (Value != null && !hasSubscribedToValue_1)
		{
			Value.OnValueChanged += OnValue_1Changed;
			hasSubscribedToValue_1 = true;
		}
	}

	private void UnsubscribeFromValue_1()
	{
		if (Value != null && hasSubscribedToValue_1)
		{
			Value.OnValueChanged -= OnValue_1Changed;
			hasSubscribedToValue_1 = false;
		}
	}

	private partial void OnValue_1Changed(bool previousValue, bool newValue);
}
";

	private const string EXPECTED_SCRIPTABLE_EVENT_CLASS = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial class TestClass
{
	private bool hasSubscribedToEventValue = false;
	private bool hasSubscribedToEventValue_1 = false;

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToEventValue();
		SubscribeToEventValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromEventValue();
		UnsubscribeFromEventValue_1();
	}

	private void SubscribeToEventValue()
	{
		if (eventValue != null && !hasSubscribedToEventValue)
		{
			eventValue.OnInvoked += OnEventValueInvoked;
			hasSubscribedToEventValue = true;
		}
	}

	private void UnsubscribeFromEventValue()
	{
		if (eventValue != null && hasSubscribedToEventValue)
		{
			eventValue.OnInvoked -= OnEventValueInvoked;
			hasSubscribedToEventValue = false;
		}
	}

	private partial void OnEventValueInvoked(object sender, global::System.EventArgs e);

	private void SubscribeToEventValue_1()
	{
		if (EventValue != null && !hasSubscribedToEventValue_1)
		{
			EventValue.OnInvoked += OnEventValue_1Invoked;
			hasSubscribedToEventValue_1 = true;
		}
	}

	private void UnsubscribeFromEventValue_1()
	{
		if (EventValue != null && hasSubscribedToEventValue_1)
		{
			EventValue.OnInvoked -= OnEventValue_1Invoked;
			hasSubscribedToEventValue_1 = false;
		}
	}

	private partial void OnEventValue_1Invoked(object sender, global::System.EventArgs e);
}
";

	private const string EXPECTED_SCRIPTABLE_BOOL_EVENT_CLASS = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial class TestClass
{
	private bool hasSubscribedToBoolEvent = false;
	private bool hasSubscribedToBoolEvent_1 = false;

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToBoolEvent();
		SubscribeToBoolEvent_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromBoolEvent();
		UnsubscribeFromBoolEvent_1();
	}

	private void SubscribeToBoolEvent()
	{
		if (boolEvent != null && !hasSubscribedToBoolEvent)
		{
			boolEvent.OnInvoked += OnBoolEventInvoked;
			hasSubscribedToBoolEvent = true;
		}
	}

	private void UnsubscribeFromBoolEvent()
	{
		if (boolEvent != null && hasSubscribedToBoolEvent)
		{
			boolEvent.OnInvoked -= OnBoolEventInvoked;
			hasSubscribedToBoolEvent = false;
		}
	}

	private partial void OnBoolEventInvoked(object sender, bool args);

	private void SubscribeToBoolEvent_1()
	{
		if (BoolEvent != null && !hasSubscribedToBoolEvent_1)
		{
			BoolEvent.OnInvoked += OnBoolEvent_1Invoked;
			hasSubscribedToBoolEvent_1 = true;
		}
	}

	private void UnsubscribeFromBoolEvent_1()
	{
		if (BoolEvent != null && hasSubscribedToBoolEvent_1)
		{
			BoolEvent.OnInvoked -= OnBoolEvent_1Invoked;
			hasSubscribedToBoolEvent_1 = false;
		}
	}

	private partial void OnBoolEvent_1Invoked(object sender, bool args);
}
";

	private const string EXPECTED_SCRIPTABLE_EVENT_T_CLASS = /*lang=cs*/@"// <auto-generated>
// 		This file was generated by the Unity Toolbox Generator, by Hertzole.
// 		Do not edit this file manually
// </auto-generated>

partial class TestClass
{
	private bool hasSubscribedToEventValue = false;
	private bool hasSubscribedToEventValue_1 = false;

	private void SubscribeToAllScriptableValues()
	{
		SubscribeToEventValue();
		SubscribeToEventValue_1();
	}

	private void UnsubscribeFromAllScriptableValues()
	{
		UnsubscribeFromEventValue();
		UnsubscribeFromEventValue_1();
	}

	private void SubscribeToEventValue()
	{
		if (eventValue != null && !hasSubscribedToEventValue)
		{
			eventValue.OnInvoked += OnEventValueInvoked;
			hasSubscribedToEventValue = true;
		}
	}

	private void UnsubscribeFromEventValue()
	{
		if (eventValue != null && hasSubscribedToEventValue)
		{
			eventValue.OnInvoked -= OnEventValueInvoked;
			hasSubscribedToEventValue = false;
		}
	}

	private partial void OnEventValueInvoked(object sender, bool args);

	private void SubscribeToEventValue_1()
	{
		if (EventValue != null && !hasSubscribedToEventValue_1)
		{
			EventValue.OnInvoked += OnEventValue_1Invoked;
			hasSubscribedToEventValue_1 = true;
		}
	}

	private void UnsubscribeFromEventValue_1()
	{
		if (EventValue != null && hasSubscribedToEventValue_1)
		{
			EventValue.OnInvoked -= OnEventValue_1Invoked;
			hasSubscribedToEventValue_1 = false;
		}
	}

	private partial void OnEventValue_1Invoked(object sender, bool args);
}
";

	[Fact]
	public void Class_ScriptableBool()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestClass.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_BOOL_CLASS,
			EXPECTED_SCRIPTABLE_BOOL_CLASS);
	}

	[Fact]
	public void Class_ScriptableValueT()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestClass.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_VALUE_T_CLASS,
			EXPECTED_SCRIPTABLE_VALUE_T_CLASS);
	}

	[Fact]
	public void Class_ScriptableEvent()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestClass.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_EVENT_CLASS,
			EXPECTED_SCRIPTABLE_EVENT_CLASS);
	}

	[Fact]
	public void Class_ScriptableBoolEvent()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestClass.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_BOOL_EVENT_CLASS,
			EXPECTED_SCRIPTABLE_BOOL_EVENT_CLASS);
	}

	[Fact]
	public void Class_ScriptableEventT()
	{
		GeneratorTest.RunTest<SubscribeMethodsGenerator>("TestClass.ScriptableValueSubscriptions.g.cs", SCRIPTABLE_EVENT_T_CLASS,
			EXPECTED_SCRIPTABLE_EVENT_T_CLASS);
	}
}