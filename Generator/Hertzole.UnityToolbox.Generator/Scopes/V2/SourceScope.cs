using System;
using System.Collections.Generic;
using System.Text;
using Hertzole.UnityToolbox.Shared;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Hertzole.UnityToolbox.Generator.NewScopes;

public sealed class SourceScope : IDisposable
{
	private StringBuilder sb;
	private string name;
	private SourceProductionContext context;

	private List<string> usings;
	private List<string> types;
	
	private string nspace;

	private string indentString;
	private int indent;

	public int Indent
	{
		get { return indent; }
		set
		{
			if (indent != value)
			{
				// Make sure indent is never negative.
				indent = value < 0 ? 0 : value;

				indentString = new string('\t', indent);
			}
		}
	}

	private static readonly ObjectPool<SourceScope> pool = new ObjectPool<SourceScope>(() => new SourceScope(), null, null);
	
	public static SourceScope Create(in string name, in SourceProductionContext context)
	{
		var scope = pool.Get();
		scope.name = name;
		scope.context = context;
		
		scope.sb = StringBuilderPool.Get();
		 
		scope.usings = ListPool<string>.Get();
		scope.types = ListPool<string>.Get();
		
		scope.indent = 0;
		scope.indentString = string.Empty;
		 
		scope.nspace = string.Empty;
		
		return scope;
	}
	
	public SourceScope WithNamespace(string value)
	{
		nspace = value;
		return this;
	}
	
	public SourceScope WithNamespace(INamespaceSymbol? namespaceSymbol)
	{
		if (namespaceSymbol == null || namespaceSymbol.IsGlobalNamespace)
		{
			return this;
		}

		nspace = namespaceSymbol.ToDisplayString();
		Indent++;
		return this;
	}

	public TypeScope WithType(string typeName, TypeType type)
	{
		return TypeScope.Create(this, typeName, type);
	}

	public void AddType(string type)
	{
		types.Add(type);
	}
	
	public void Dispose()
	{
		sb.AppendLine("// <auto-generated>");
		sb.AppendLine("// \t\tThis file was generated by the Unity Toolbox Generator, by Hertzole.");
		sb.AppendLine("// \t\tDo not edit this file manually");
		sb.AppendLine("// </auto-generated>");
		sb.AppendLine();

		if (usings.Count > 0)
		{
			for (int i = 0; i < usings.Count; i++)
			{
				sb.Append("using ");
				sb.Append(usings[i]);
				sb.AppendLine(";");
			}
			
			sb.AppendLine();
		}
		
		if (!string.IsNullOrEmpty(nspace))
		{
			sb.Append("namespace ");
			sb.AppendLine(nspace);
			sb.AppendLine("{");
			Indent++;
		}

		for (int i = 0; i < types.Count; i++)
		{
			sb.AppendLine(types[i]);
			
			// Add a space between each type.
			if (i < types.Count - 1)
			{
				sb.AppendLine();
			}
		}
		
		if (!string.IsNullOrEmpty(nspace))
		{
			Indent--;
			sb.AppendLine("}");
		}
        
		using (StringBuilderPool.Get(out StringBuilder nameBuilder))
		{
			nameBuilder.Append(name);
			nameBuilder.Append(".g.cs");
			
			context.AddSource(nameBuilder.ToString(), SourceText.From(sb.ToString(), Encoding.UTF8));
		}
		
		StringBuilderPool.Return(sb);
		ListPool<string>.Return(usings);
		ListPool<string>.Return(types);

		pool.Return(this);
	}

	public string GetIndent()
	{
		return indentString;
	}
}