name: Test and Build

on:
  push:
    branches: [master]
    paths:
      - 'Generator/**'
      - 'Assets/**'
      - 'Packages/**'
      - '.github/workflows/**'
      - '.releaserc.yml'

env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  generator:
    name: Test and Build Generator
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2023.2.0f1-base-3.0.0
    outputs:
      has_changes: ${{ steps.filter.outputs.workflows }}
    steps:
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Update Git
        run: |
            apt-get update -y
            apt-get install software-properties-common -y
            add-apt-repository ppa:git-core/ppa
            apt-get update -y
            apt-get install -y git

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Safe repo
        run: git config --global --add safe.directory /__w/unity-toolbox/unity-toolbox

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            workflows:
              - 'Generator/**'
              - '.github/workflows/**'

      - name: Cache Library
        uses: actions/cache@v3.0.11
        if: steps.filter.outputs.workflows == 'true'
        with:
          path: Library
          key: LibraryFolder
          restore-keys: |
            LibraryFolder

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        if: steps.filter.outputs.workflows == 'true'
        with:
          dotnet-version: |
            6.x
            7.x
            8.x

      - name: Build Generator
        if: steps.filter.outputs.workflows == 'true'
        run: |
          cd Generator
          dotnet publish -c Release -o ../GeneratorBuild
          cd ..

      - name: Setup Unity
        if: steps.filter.outputs.workflows == 'true'
        continue-on-error: true
        env: 
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          echo "$UNITY_LICENSE" | tr -d '\r' > License.ulf
          unity-editor -nographics -logFile /dev/stdout -manualLicenseFile License.ulf -quit 
          unity-editor -nographics -logFile /dev/stdout -customBuildName unity-toolbox -projectPath . -executeMethod GitTools.Solution.Sync -quit

      - name: Test Generator
        if: steps.filter.outputs.workflows == 'true'
        run: |
          cd Generator
          dotnet test

  unity:
    name: Test and Build Unity Package
    runs-on: ubuntu-latest
    needs: generator
    container: unityci/editor:ubuntu-2023.2.0f1-base-3.0.0
    steps:
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Update Git
        run: |
            apt-get update -y
            apt-get install software-properties-common -y
            add-apt-repository ppa:git-core/ppa
            apt-get update -y
            apt-get install -y git

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Safe repo
        run: git config --global --add safe.directory /__w/unity-toolbox/unity-toolbox

      - name: Cache Library
        uses: actions/cache@v3.0.11
        with:
          path: Library
          key: LibraryFolder
          restore-keys: |
            LibraryFolder

      - name: Setup Unity
        continue-on-error: true
        env: 
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          echo "$UNITY_LICENSE" | tr -d '\r' > License.ulf
          unity-editor -nographics -logFile /dev/stdout -manualLicenseFile License.ulf -quit 
          unity-editor -nographics -logFile /dev/stdout -customBuildName unity-toolbox -projectPath . -executeMethod GitTools.Solution.Sync -quit

      - name: Install .NET
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: |
            7.x

      - name: Build Generator
        run: |
          cd Generator
          dotnet publish -c Release -o ../GeneratorBuild
          cd ..
          git config --global user.name 'github-bot'
          git config --global user.email 'github-bot@users.noreply.github.com'
          git add Packages/se.hertzole.unitytoolbox/Plugins/Hertzole.UnityToolbox.Generator.dll
          git add Packages/se.hertzole.unitytoolbox/Plugins/Hertzole.UnityToolbox.Analyzers.dll
          git add Packages/se.hertzole.unitytoolbox/Plugins/Hertzole.UnityToolbox.Shared.dll

      - name: Run Play Mode Tests
        run: unity-editor -nographics -logFile /dev/stdout -runTests -testPlatform playmode -testResults Tests/playmode.xml -enableCodeCoverage -coverageResultsPath TestCoverage -debugCodeOptimization -coverageOptions "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+Hertzole.UnityToolbox"

      - name: Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/changelog
            @semantic-release/git
          branch: master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Package Branch
        run: |
          git branch -d package &> /dev/null || echo package branch not found
          git subtree split -P "$PKG_ROOT" -b package
          if [[ -d "Assets/Samples" ]]; then
            mv "Assets/Samples" /tmp/example
          fi
          if [[ -f "README.md" ]]; then
            mv README.md /tmp/README.md
          fi
          mv Packages/se.hertzole.unitytoolbox/Plugins/Hertzole.UnityToolbox.Generator.dll /tmp/Generator.dll
          mv Packages/se.hertzole.unitytoolbox/Plugins/Hertzole.UnityToolbox.Analyzers.dll /tmp/Analyzers.dll
          mv Packages/se.hertzole.unitytoolbox/Plugins/Hertzole.UnityToolbox.Shared.dll /tmp/Shared.dll
          git checkout package
          if [[ -d "/tmp/example" ]]; then
            mkdir "Samples~"
            mv /tmp/example/* "Samples~/"
            git add "Samples~"
          fi
          if [[ -f "/tmp/README.md" ]]; then
            mv /tmp/README.md README.md
            git add README.md
          fi
          if [[ -d "Tests" ]]; then
            rm -rf Tests
            rm -f Tests.meta
          fi
          mv /tmp/Generator.dll Plugins/Hertzole.UnityToolbox.Generator.dll 
          mv /tmp/Analyzers.dll Plugins/Hertzole.UnityToolbox.Analyzers.dll 
          mv /tmp/Shared.dll Plugins/Hertzole.UnityToolbox.Shared.dll 
          git config --global user.name 'github-bot'
          git config --global user.email 'github-bot@users.noreply.github.com'
          git commit -am "Packaged project"
          git push -f -u origin package
        env:
          PKG_ROOT: "Packages/se.hertzole.unitytoolbox"
        shell: bash

      - name: Create Release Tag
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          git tag $TAG package
          git push origin --tags
        env:
          TAG: package/v${{ steps.semantic.outputs.new_release_version }}
